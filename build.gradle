plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
}

sourceSets {
    testmod {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    testmodImplementation.extendsFrom implementation
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    shadow(implementation("com.badlogicgames.gdx:gdx-bullet:${project.libgdk_version}"))
    shadow(implementation("com.badlogicgames.gdx:gdx-bullet-platform:${project.libgdk_version}:natives-desktop"))

    modRuntime name: 'hyperstellar-1.0.0-dev'

    modRuntime "com.github.Snakefangox:rapid-register:2.1"
    modRuntime "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:3.0.0"
    modRuntime "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:3.0.0"
    modRuntime "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-scoreboard:3.0.0"

    // Needed for the test mod
    testmodImplementation sourceSets.main.output
    testmodImplementation name: 'rapid-register-0.1.0'
}

minecraft {
    accessWidener "src/main/resources/worldshell.accesswidener"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
